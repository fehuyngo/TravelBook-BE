const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { check, validationResult } = require("express-validator");
const User = require("../models/User");

const router = express.Router();

// üü¢ [POST] ƒêƒÉng k√Ω t√†i kho·∫£n
router.post(
  "/register",
  [
    check("name", "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng").not().isEmpty(),
    check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
    check("password", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±").isLength({ min: 6 }),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

    const { name, email, password } = req.body;

    try {
      let user = await User.findOne({ email });
      if (user) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });

      // M√£ h√≥a m·∫≠t kh·∫©u
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);

      user = new User({ name, email, password: hashedPassword });
      await user.save();

      res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
    } catch (error) {
      res.status(500).json({ message: "L·ªói ƒëƒÉng k√Ω!" });
    }
  }
);

// üü¢ [POST] ƒêƒÉng nh·∫≠p
router.post(
  "/login",
  [
    check("email", "Email kh√¥ng h·ª£p l·ªá").isEmail(),
    check("password", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng").exists(),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

    const { email, password } = req.body;

    try {
      const user = await User.findOne({ email });
      if (!user) return res.status(400).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u!" });

      // T·∫°o JWT Token
      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

      res.json({ token, user: { id: user._id, name: user.name, email: user.email } });
    } catch (error) {
      res.status(500).json({ message: "L·ªói ƒëƒÉng nh·∫≠p!" });
    }
  }
);

// üü¢ [GET] L·∫•y th√¥ng tin user (c·∫ßn token)
router.get("/me", async (req, res) => {
  try {
    const token = req.header("Authorization")?.replace("Bearer ", "");
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId).select("-password");
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

    res.json(user);
  } catch (error) {
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
  }
});

module.exports = router;
